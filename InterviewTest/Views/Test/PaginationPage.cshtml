@*@model Tuple<IEnumerable<Employee>,IEnumerable<Office>,IEnumerable<Position>>*@
@*@model IEnumerable<dynamic>*@
@*@model List<EmployeeViewModel>*@
@model EmployeeViewModels
@{
    ViewBag.Title = "PaginationPage";
}

<style>
    .disabled {
        pointer-events: none;
        cursor: not-allowed;
        opacity: 0.65;
    }
</style>

<div class="row">
    <input id="pageNumberHiddenField" name="pageNumberHiddenField" type="hidden" value="1" />
    <h1>Pagination</h1>
    <p>
        This page displays various joined fields from several different database tables.
        100 records are displayed on each page.
    </p>
    @*<h1>Part II B</h1>
        <p>
            There are over 1000 <i>[InterviewTest].[dbo].[Employee]</i> records in the database.
            <ol>
                <li>Output each employee's first name, last name, office name, and position name.</li>
                <li>Implement server-side pagination of 100 records per page.</li>
                <li>
                    Add ability to filter by one of the following:
                    <ul>
                        <li>Part Time/Full Time</li>
                        <li>Remote/On site</li>
                    </ul>
                </li>
            </ol>
        </p>
        <p>Add your code to this view.</p>*@
    <hr />

    <!-- Your code here -->
    <!--need to do inner join-->
    <table id="employees" class="table" cellpadding="0" cellspacing="0">
        <tr id="rowZero">
            <th scope="col">Row No.</th>
            <th scope="col">First Name</th>
            <th scope="col">Last Name</th>
            <th scope="col">Office Name</th>
            <th scope="col">Position</th>
        </tr>
        @*@{int i = 0; }
        @foreach (EmployeeViewModel employee in Model.Employees)
        {
            ++i;
            <tr>
                <th scope="row">@i</th>
                <td>@employee.firstName</td>
                <td>@employee.lastName</td>
                <td>@employee.officeName</td>
                <td>@employee.position</td>
            </tr>
        }*@
    </table>
</div>

<input type="hidden" id="pageNumberHiddenField" value="" />

<button type="button" id="previous"> < </button>
<button type="button" id="next"> > </button>

<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/Employee.js"></script>
<script>
    const defaultPageNumber = 1;
    var currentPageNumber = 0;

    function removeChildNodes(employeesTable)
    {
        if (employeesTable.hasChildNodes() && employeesTable.childElementCount > 1)
        {
            for (let i = 1; i < employeesTable.childElementCount; i++)
            {
                employeesTable.children[i].innerHTML = "";
            }
        }        
        return true;
    }

    function GetPageList()
    {
        //console.log("in GetPageList().");
        var Employees = new Array();
        //var employeesTable = document.getElementById("employees");
        var employeesTable = document.querySelector("#employees");

        $.ajax({
            method: "POST",
            url: "@Url.Action("GetPageList", "Test")",
            data: JSON.stringify({ pageNumber: currentPageNumber }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response)
            {
                removeChildNodes(employeesTable);
                console.log("response length: " + response.length);
                //console.log("Employees: " + response);
                for (let i = 0; i < response.length; i++)
                {
                    let employee = new Employee(response[i].firstName, response[i].lastName, response[i].officeName, response[i].position);
                    let tableRow = document.createElement("tr");
                    //<th scope="row">++i;</th>
                    let td0 = document.createElement("th");
                    td0.setAttribute("scope", "row");
                    let td1 = document.createElement("td");
                    let td2 = document.createElement("td");
                    let td3 = document.createElement("td");
                    let td4 = document.createElement("td");

                    if (currentPageNumber === 1) td0.innerHTML = i + 1;
                    else td0.innerHTML = (i + 1) + 100;
                    td1.innerHTML = employee.firstName;
                    td2.innerHTML = employee.lastName;
                    td3.innerHTML = employee.officeName;
                    td4.innerHTML = employee.position;

                    tableRow.appendChild(td0);
                    tableRow.appendChild(td1);
                    tableRow.appendChild(td2);
                    tableRow.appendChild(td3);
                    tableRow.appendChild(td4);

                    employeesTable.appendChild(tableRow);

                }
            },
            error: function (errorMessage)
            {
                console.log("There was an error for some reason.");
            }
        });
    }

    function Initialize()
    {
        let previousButton = document.getElementById("previous");

        //set initial page number
        currentPageNumber = defaultPageNumber;

        if (currentPageNumber === 1)
        {
            previousButton.disabled = true;
            if (previousButton.classList.contains("disabled") === false) previousButton.classList.add("disabled");
        }
        GetPageList();
        /*var hiddenFieldPageNumber = document.getElementById("pageNumberHiddenField").setAttribute("value", currentPageNumber);*/
    }

    function NextPage()
    {
        currentPageNumber = currentPageNumber + 1;
        let previousButton = document.getElementById("previous");
        if (currentPageNumber > 1)
        {
            previousButton.disabled = false;
            if (previousButton.classList.contains("disabled")) previousButton.classList.remove("disabled");
        }
        GetPageList();
    }

    function PreviousPage()
    {
        currentPageNumber = currentPageNumber - 1;
        let previousButton = document.getElementById("previous");
        if (currentPageNumber < 2)
        {
            previousButton.disabled = true;
            if (previousButton.classList.contains("disabled") === false) previousButton.classList.add("disabled");
        }
        GetPageList();
    }

    window.addEventListener("load", Initialize);
    document.getElementById("next").addEventListener("click", NextPage);
    document.getElementById("previous").addEventListener("click", PreviousPage);

</script>