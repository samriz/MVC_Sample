@*@model Tuple<IEnumerable<Employee>,IEnumerable<Office>,IEnumerable<Position>>*@
@*@model IEnumerable<dynamic>*@
@*@model List<EmployeeViewModel>*@
@model EmployeeViewModels
@{
    ViewBag.Title = "PaginationPage";
}

<style>
    table{width: 100%;}
    button{width: 35px;}
    .tdPrevious{text-align: left;}
    .tdNext {text-align: right;}
    .tdCenter{text-align: center;}
    .previous[disabled], .next[disabled] 
    {
        pointer-events: none;
        cursor: not-allowed;
        opacity: 0.65;
    }
</style>

@*<div class="row">*@
    <header>
        <h1>Pagination</h1>
        <p>
            This page displays various joined fields from several different database tables.
            100 records are displayed on each page.
        </p>
    </header>
    @*<h1>Part II B</h1>
            <p>
                There are over 1000 <i>[InterviewTest].[dbo].[Employee]</i> records in the database.
                <ol>
                    <li>Output each employee's first name, last name, office name, and position name.</li>
                    <li>Implement server-side pagination of 100 records per page.</li>
                    <li>
                        Add ability to filter by one of the following:
                        <ul>
                            <li>Part Time/Full Time</li>
                            <li>Remote/On site</li>
                        </ul>
                    </li>
                </ol>
            </p>
            <p>Add your code to this view.</p>
        <hr/>*@

    <!-- Your code here -->
    <!--need to do inner join-->
    <table>
        <tr>
            <td class="tdPrevious">
                <button type="button" class="previous"> < </button>
            </td>
            <td class="tdCenter">
                <!--<input type="number" id="inputPageNumber"/>-->
            </td>
            <td class="tdNext">
                <button type="button" class="next"> > </button>
            </td>
        </tr>
    </table>
    <table id="employees" class="table" cellpadding="0" cellspacing="0">
        <tr id="row_0">
            <th scope="col">Row No.</th>
            <th scope="col">First Name</th>
            <th scope="col">Last Name</th>
            <th scope="col">Office Name</th>
            <th scope="col">Position</th>
        </tr>
        @*@{int i = 0; }
            @foreach (EmployeeViewModel employee in Model.Employees)
            {
                ++i;
                <tr>
                    <th scope="row">@i</th>
                    <td>@employee.firstName</td>
                    <td>@employee.lastName</td>
                    <td>@employee.officeName</td>
                    <td>@employee.position</td>
                </tr>
            }*@
    </table>
    <div hidden><i>You've encountered an error.'</i></div>
@*</div>*@

<table>
    <tr>
        <td class="tdPrevious">
            <button type="button" class="previous"> < </button>
        </td>
        <td class="tdCenter">
            <input type="number" id="inputPageNumber" style="width:40px" step="1"/><br/>
            <span id="errorPageNumber" style="color:red" hidden>Invalid page number</span>
        </td>
        <td class="tdNext">
            <button type="button" class="next"> > </button>
        </td>
    </tr>
</table>

<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/Employee.js"></script>
@*<script src="~/Scripts/helper.js"></script>*@

<script>
    const DefaultPageNumber = 1;
    var CurrentPageNumber = 0;
    var totalNumberOfPages;
    var EmployeesList = new Array();

    window.addEventListener("load", Initialize);

    function Initialize()
    {
        //set initial page number
        CurrentPageNumber = DefaultPageNumber;
        document.getElementById("inputPageNumber").value = CurrentPageNumber;
        document.getElementById("inputPageNumber").setAttribute("min", 1);
        
        for (let i = 0; i < previousButtons.length; i++)
        {
            previousButtons[i].disabled = true;
        }
        console.log(`Current Page Number: ${CurrentPageNumber}`);
        let arrEmployees = getAllEmployees();
        totalNumberOfPages = arrEmployees.length / 100;
        if ((arrEmployees.length % 100) > 0)
        {
            let roundedUpTotalNumberOfPages = (totalNumberOfPages - ((arrEmployees.length % 100)/100)) + 1;
            totalNumberOfPages = roundedUpTotalNumberOfPages;
        }
        console.log(`Total Number of Pages: ${totalNumberOfPages}`);
        document.getElementById("inputPageNumber").setAttribute("max", totalNumberOfPages);
        buildPageRows(arrEmployees);
        eventListeners();
        EmployeesList = arrEmployees;
    }

    function buildPageRows(employees)
    {
        //let startIndex = (CurrentPageNumber * 100) - 99;
        //for (let i = startIndex; i < startIndex + 100; i++)
        for (let i = 1; i < 100; i++)
        {
            let employee = new Employee(employees[i].firstName, employees[i].lastName, employees[i].officeName, employees[i].position);

            //create table elements
            // <th scope="row">++i;</th>
            let th = document.createElement("th");
            th.setAttribute("scope", "row");
            let td1 = document.createElement("td");
            let td2 = document.createElement("td");
            let td3 = document.createElement("td");
            let td4 = document.createElement("td");

            let rowNumber;

            if (CurrentPageNumber === 1)
            {
                rowNumber = i;
                th.innerHTML = rowNumber.toString();
            }

            //set ids of newly created table elements
            let tableRow = document.createElement("tr");
            tableRow.id = "row_" + rowNumber.toString();
            th.id = "thRowNumber_" + rowNumber.toString();
            td1.id = "tdFirstName_" + rowNumber.toString();
            td2.id = "tdLastName_" + rowNumber.toString();
            td3.id = "tdOfficeName_" + rowNumber.toString();
            td4.id = "tdPosition_" + rowNumber.toString();

            td1.innerHTML = employee.firstName;
            td2.innerHTML = employee.lastName;
            td3.innerHTML = employee.officeName;
            td4.innerHTML = employee.position;

            tableRow.appendChild(th);
            tableRow.appendChild(td1);
            tableRow.appendChild(td2);
            tableRow.appendChild(td3);
            tableRow.appendChild(td4);

            var employeesTable = document.querySelector("#employees > tbody");
            employeesTable.appendChild(tableRow);
        }
    }

    function populateAllRowsOnPage(employees, CurrentPageNumber)
    {
        let startIndex = (CurrentPageNumber * 100) - 99;
        for (let i = startIndex; i < startIndex + 99; i++)
        //for (let i = 1; i < 100; i++)
        {
            let employee = new Employee(employees[i].firstName, employees[i].lastName, employees[i].officeName, employees[i].position);
            let rowNumber = i % 100;
            $("#row_" + rowNumber.toString()).show();
            let rowNumberId = "thRowNumber_" + rowNumber.toString();//(rowNumber+1).toString();
            let th = document.getElementById(rowNumberId);

            let thValue = (rowNumber + (100 * (CurrentPageNumber - 1)));
            //console.log(`thValue: ${thValue}`);
            th.innerHTML = thValue.toString();

            let td1 = document.getElementById("tdFirstName_" + rowNumber.toString());
            let td2 = document.getElementById("tdLastName_" + rowNumber.toString());
            let td3 = document.getElementById("tdOfficeName_" + rowNumber.toString());
            let td4 = document.getElementById("tdPosition_" + rowNumber.toString());

            td1.innerHTML = employee.firstName;
            td2.innerHTML = employee.lastName;
            td3.innerHTML = employee.officeName;
            td4.innerHTML = employee.position;

            //if we've reached end of employees list then clear out all remaining rows
            if (i === employees.length - 1)
            {
                let remainingRows = 99 - (i % 100);
                console.log(`remaining rows: ${remainingRows}`);
                for (let i2 = (i%100)-1; i2 < 100; i2++)
                {
                    $("#row_" + i2.toString()).hide();
                }
                return;
            }            
        }
    }    

    function getAllEmployees()
    {
        let list = new Array();
        $.ajax({
            type: "POST",
            url: "@Url.Action("GetAllEmployees", "Test")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (response)
            {
                if (typeof response != undefined || typeof response != null)
                {
                    if (response.length > 0) list = response;
                }
            },
            error: function (jqXHR, textStatus, errorThrown) { console.log("Error- Status: " + textStatus + "<br />jqXHR Status: " + jqXHR.status + "<br />jqXHR Response Text:" + jqXHR.responseText); }
        });
        return list;
    }    

    //event handling
    var previousButtons = document.getElementsByClassName("previous");
    var nextButtons = document.getElementsByClassName("next");

    function previousButtonHandler()
    {
        --CurrentPageNumber;
        //console.log(`Current page number: ${CurrentPageNumber}`);
        populateAllRowsOnPage(EmployeesList,CurrentPageNumber);
        if (CurrentPageNumber < 2)
        {
            for (let i = 0; i < previousButtons.length; i++)
            {
                previousButtons[i].disabled = true;
            }
        }
        else
        {
            for (let i = 0; i < previousButtons.length; i++)
            {
                previousButtons[i].disabled = false;
            }
        }
        if (CurrentPageNumber < totalNumberOfPages)
        {
            for (let i = 0; i < nextButtons.length; i++)
            {
                nextButtons[i].disabled = false;
            }
        }
        document.getElementById("inputPageNumber").value = CurrentPageNumber;
    }
    function nextButtonHandler()
    {
        ++CurrentPageNumber;
        //console.log(`Current page number: ${CurrentPageNumber}`);
        populateAllRowsOnPage(EmployeesList,CurrentPageNumber);
        if (CurrentPageNumber > 1)
        {
            for (let i = 0; i < previousButtons.length; i++)
            {
                //console.log(`iterating through previous buttons`);
                previousButtons[i].disabled = false;
            }
        }
        if (CurrentPageNumber === totalNumberOfPages)
        {
            for (let i = 0; i < nextButtons.length; i++)
            {
                nextButtons[i].disabled = true;
            }            
        }
        else
        {
            for (let i = 0; i < nextButtons.length; i++)
            {
                nextButtons[i].disabled = false;
            }
        }
        document.getElementById("inputPageNumber").value = CurrentPageNumber;
    }
    function inputPageNumberHandler(event)
    {
        if (event.key === "Enter")
        {
            if ((((this.value * 10) % 10) === 0) && (this.value >= 1 || this.value <= totalNumberOfPages))
            {
                document.getElementById("errorPageNumber").hidden = true;
                event.preventDefault();
                CurrentPageNumber = this.value;
                if (CurrentPageNumber != totalNumberOfPages)
                {
                    for (let i = 0; i < nextButtons.length; i++)
                    {
                        nextButtons[i].disabled = false;
                    }
                }
                else
                {
                    for (let i = 0; i < nextButtons.length; i++)
                    {
                        nextButtons[i].disabled = true;
                    }
                }
                populateAllRowsOnPage(EmployeesList, CurrentPageNumber);                 
            }
            else
            {
                document.getElementById("errorPageNumber").hidden = false;
            }            
        }
    }
    function eventListeners()
    {
        for (let i = 0; i < previousButtons.length; i++)
        {
            previousButtons[i].addEventListener("click", previousButtonHandler);
            nextButtons[i].addEventListener("click", nextButtonHandler);
        }
        document.addEventListener("keydown", (event) => {
            switch (event.key) {
                case "ArrowRight":
                    nextButtons[0].click();
                    console.log(`right arrow clicked`);
                    break;
                case "ArrowLeft":
                    previousButtons[0].click();
                    console.log(`left arrow clicked`);
                    break;
            }
        });
        document.getElementById("inputPageNumber").addEventListener("keydown", inputPageNumberHandler);
    }
    //function enableByClassName(className, enable = true)
    //{
    //    let elements = document.getElementsByClassName(className);
    //    for (let i = 0; i < elements.length; i++)
    //    {
    //        if (enable) elements[i].disabled = false;
    //        if (enable === false) elements[i].disabled = true;
    //    }
    //}
</script>