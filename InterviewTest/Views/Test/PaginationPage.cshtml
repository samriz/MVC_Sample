@*@model Tuple<IEnumerable<Employee>,IEnumerable<Office>,IEnumerable<Position>>*@
@*@model IEnumerable<dynamic>*@
@model List<PaginationModel>
@{
    ViewBag.Title = "Part II B";
}

<div class="row">
    <h1>Pagination</h1>
    <p>
        This page displays various joined fields from several different database tables. 
        100 records are displayed on each page.

    </p>
@*<h1>Part II B</h1>
<p>
    There are over 1000 <i>[InterviewTest].[dbo].[Employee]</i> records in the database.
    <ol>
        <li>Output each employee's first name, last name, office name, and position name.</li>
        <li>Implement server-side pagination of 100 records per page.</li>
        <li>
            Add ability to filter by one of the following:
            <ul>
                <li>Part Time/Full Time</li>
                <li>Remote/On site</li>
            </ul>
        </li>
    </ol>
</p>
<p>Add your code to this view.</p>*@
<hr />

<!-- Your code here -->
<!--need to do inner join-->
<table class="table" id="employees" cellpadding="0" cellspacing="0">
    <tr>
        <th scope="col">Row No.</th>
        <th scope="col">First Name</th>
        <th scope="col">Last Name</th>
        <th scope="col">Office Name</th>
        <th scope="col">Position</th>
    </tr>
    @{int i = 0; }
    @foreach (var item in Model)
    {
        ++i;
        <tr>
            <th scope="row">@i</th>
            <td>@item.firstName</td>
            <td>@item.lastName</td>
            <td>@item.officeName</td>
            <td>@item.position</td>
        </tr>
    }
</table>
</div>

@*<input type="button" id="view" value="View Employees"/>*@
<input type="button" name ="previous" id="previous" value="<" onclick="location.href='@Url.Action("PreviousPage", "Test")'">
<input type="button" id="next" value=">" onclick="location.href='@Url.Action("NextPage", "Test")'"/>